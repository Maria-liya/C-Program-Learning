Q:按不同排序方式需要查找的次数
A:
+堆排序：nlog2n
+快速排序：n*（n-1）/2 与冒泡排序同
+顺序查找；n
+寻找最大项：n-1  第二低
+有序表的对分查出：log2n 最坏情况下时间复杂度最低
+希尔排序：nr(1<r<2)

Q:线性表
A:
-同一线性表中的数据元素必定具有相同的特性（属于同一数据对象）
-对线性表可做插入 删除 查找

Q:队列
A:
+循环队列
 -是队列的一种顺序存储结构
 -线性结构
 -只有front=rear=NULL时，队列为空
 -front=rear!=NULL 
   -空：可以插入元素
   -满：插入元素会出现上溢错误
   -带链队列只存在一个元素，f 和 r不相等的情况无法判断

  

Q:介绍链表的类型及其访问
A:
+ 循环链表
 - 叶子结点的指针指向头节点
 —从表中任何一个节点出发，就可以不重复地访问到表中其他所有结点
+单向链表
 - 只有从头的指针开始，沿各结点的指针扫描链表中的所有结点
 - 只含有一个指针域  存储指示后件的信息
+ 双向链表
 - 有两个指针域，但属于线性结构，链式存储
 —从任何一个结点出发就可以访问到表中其他所有结点，但会出现重复访问
 - 叶子结点的右指针为空 左指针不为空
+二叉链表
 -从根结点开始可以访问树中所有结点，但是从其他结点位置出发，只能访问它后面的结点。
+多重链表
-结点中具有多个指针域
+线性链表的链式储存结构可以是连续的 也可以是不连续的

Q:栈的结构
A: 
+组织数据：先进后出
+栈顶：允许插入和删除的一端
+栈底：不允许插入和删除的另一端
-不管是顺序栈还是带链的栈，在操作过程中的栈底指针是动态变化的

Q:栈中的元素个数
A:
-top=bottom=NULL,栈为空
-top=bottom=！NULL，栈中只存在一个元素
-S（1：m) 初始状态为top=m+1  则栈中的元素个数为0
-bottom-top+1

Q:队
A:
+组织数据：先进先出
 -先到先服务的作业进度


Q:算法空间复杂度和时间复杂度
A:
+时间复杂度
-执行算法需要的计算工作量，用算法执行的基本运算次数来衡量
—与计算运行速度，计算机储存空间无关
+空间复杂度
-执行这个算法需要的空间，包括输入数据所占的储存空间

Q:线性表的顺序存储结构
A:
+各个元素所占的字节数相同，元素的存储顺序与逻辑顺序一致
+表中各数据元素是按逻辑顺序依次存放的

Q:二叉树的遍历
A:
+ 前序遍历：最先访问根结点
+ 中序遍历 访问根结点在左子树和右子树之间
+ 后序遍历：最后访问根结点


Q:二叉树的结点
A:
-叶子结点（度为0）总是比度为2的结点多一个
+度 有几度 就有几个孩子
 -树的总的结点数为树中所有结点的度数之和+1，3*5+2*4……
 -树的总的结点数为各度的结点数之和

Q:什么树和二叉树
A：
-树：由结点和边组成的一种层次结构
-二叉树：每个结点最多有两个子节点
  -根结点   子节点   叶子结点（无孩子）
Q:二叉树的性质
A:
+第i层最多有2的（i-1）次方个结点
+深度为k的二叉树，最多有2的k次方-1个结点

Q:特殊的二叉树
A:
+满二叉树
-每层都填满
+完全二叉树
-除了最后一层缺少右边的若干结点，其余各层都填满

Q:软件设计一般分为两个阶段，使用的工具有
A:
+总体设计（概要设计）
-系统结构图
-软件需求规格说明  包含软件的功能需求 性能需求 外部接口
+详细设计
-程序流程图  N-S图  PAD图（问题分析，软件详细设计的表示工具） HIPO图，判定表 ，PDL
-清晰第一 效率第二

Q:软件中的设计
A:
+物理设计
-优化数据库的系统查询性能的索引设计属于数据库设计
+逻辑设计
-任务：将E-R图转换成关系模式
-E-R图：矩形-实体集  椭圆形-属性  菱形-联系

Q:软件的生命周期
A:
-软件产品从提出 实现 使用维护到停止使用退役的过程
-定义阶段 开发阶段 维护阶段

Q:软件设计中的模块划分应遵循的准则是？
A:
+高内聚低耦合
+模块的独立性的概念是抽象，模块化，信息隐蔽和局部化的直接结果



Q:程序流程图
A:
方框：一个加工步骤
菱形：一个逻辑条件
箭头：控制流

Q:软件系统总体结构
A:
+原子模块
-没有从属结点
+扇入：一个模块直接调用的其他模块个数
+深入：控制的层数

Q:软件危机有哪些
A:
+开发生产率低  质量难以控制 成本不断提高 缺少适当的文档资料
-不包括过程不规范

Q:软件工程
A:
+要素：方法 工具 过程
+源自软件危机 是为了解决软件危机的问题

Q:软件过程
A:
+ 把输入转化为输出的一组彼此相关的资源和活动

Q:测试技术及测试步骤
A:
+测试目的：发现程序中的错误
-程序调试的任务是诊断和改正程序中的错误
+测试步骤
—单元测试 集成测试 确认测试（验收测试） 系统测试
+集成测试
-也叫组装测试，是对各模块按照设计要求，组装成的程序进行测试，为了发现概要设计的错误
-模块的执行路径
-方式
  -增量方式（自顶向下 自底向上 或者两种结合）
  -非增量方式（一次性组装方式）
+白盒测试
-根据程序的内部逻辑来设计测试
-逻辑覆盖测试 基本路径测试
+黑盒测试
-功能测试或者数据驱动测试 依据软件功能的描述
-等价类划分法  边界值分析法  错误推测法 因果图
-设计测试用例的主要依据是程序外部功能
+单元测试
-依据：源程序和详细设计说明书
-对模块进行正确性检验的测试

Q:软件测试用例
A:输入数据和预期输出结果

Q：什么是数据流图（DFD） 
A:
 + 是描述数据处理过程的工具，需求分析阶段使用的工具
 + 是需求理解的逻辑模型的图形表示，直接支持系统的需求（功能）建模
 + 不支持系统的数据建模
 + 数据储存之间不应有数据流
 + 对加工处理建立唯一，层次性编号
 + 子图个数不大于父图中的处理个数
 +数据字典（DD）：定义DFD中的各个成分的具体含义
-在需求分析阶段建立DD

Q；数据的逻辑独立性
A:
数据库中的总体逻辑结构发生变化，而应用程序不受影响

Q:数据库（DB） 数据库系统（DBS） 数据库管理系统（DBMS）的关系
A:
+DBS包括DB和DBMS
+DBS的三级模式
- 内模式（数据在计算机物理结构中的实际存储形式，只有一个） 
-概念模式（设计者的数据全局逻辑） 
-外模式（用户对数据的要求，可有无限多个）
-作用：保持数据的独立性（逻辑+物理）
+数据库中产生数据不一致的原因：数据冗余

Q:数据库管理系统的阶段 主要功能 特点 数据语言 关系运算
A；
+阶段：人工管理阶段 文件系统 数据库系统
-文件系统冗余度大，共享性差，独立性差
+基本功能
-数据模式定义  数据存取的物理构建 数据操纵 数据完整性  安全性的定义与检查 并发控制与故障恢复 数据的服务
-无通信
+特点
-独立性，共享性，集成性高
-冗余性低  数据统一管理与控制
+数据语言
-数据定义语言：负责数据的模式定义与数据的物理存取构建
-数据操纵语言：查询 增 删 改
-数据控制语言：负责数据的完整性，安全性的定义与检查以及并发控制
+关系运算
-投影运算：从关系模式中指定若干属性组成新的关系
-选择运算
-笛卡尔积 
-交 连 接
-等值连续 可将两个表连起来，重复的属性也可被去掉

Q:数据库应用系统核心问题
A；
+ 数据库设计

Q:长期储存在计算机内，有组织的，可共享的大量数据的集合是？
A:
+数据库


Q:数据模型的三个要素 三种类型
A:
+数据结构 数据操作  数据约束
+类型
-概念模型 ：
-逻辑模型 ：面向数据库系统的模型，着重于数据在数据库系统一级实现
  -层次 网状 关系 面向对象
-物理模型

Q:关系模型
A:
+用二维表来表示关系
-一个二维表就是一个关系
+关系数据模型的三个组成部分
-关系的数据结构 数据操纵 完整性约束
+关系数据库
-二维表：表示实体间联系
-元组有限唯一 次序无关  元组分量的原子性
-属性名唯一性 次序无关性  分量值域统一性
-不同列可以有相同的数据类型
-键：能唯一标识元组的属性或属性集合（可有一个或多个）
 -主键：在二维表中 唯一 确定某一行所用的指标 
 -外键：属性值必须是另一个表主键的有效值或空值

Q:关系模型的三类数据约束及第一范式
A:
+实体完整性约束：主键不可有空值
-至少有一个或多个候选关键字
+参观完整性约束：外键必须与另一表对应
+第一范式（1FN）
-主属性不为空且不重复，每个属性不能再被分为简单项
+第二范式（2FN）
-每个非主属性都没有对主键的部分依赖
+第三范式（3FN）
-没有非主属性都没有对主键的传递依赖
+BCFN范式：
-所有属性都不依赖于关系的任何候选键

Q:概念模型
A；
+面向客观世界和用户的模型
-与计算机平台无关
-实体-联系模型  面向对象模型

Q:层次模型
A；
+用树形结构表示实体及其之间的联系的模型

Q:什么是类
A:
+类是具有共同属性，共同方法的对象的集合，是对象的抽象，描述了属于该对象类型的所有对象的性质。
+继承：类之间共享属性和操作机制
Q:结构化程序的三种基本结构
A:
+顺序 选择 重复
+ 自顶向下 逐步求精 模块化及限制使用goto语句

Q:什么是对象
A：
+ 由描一个述该对象属性的数据以及可以对这些数据施加的所有操作封装在一起构成的统一体。
+由对象名（标识） 属性  操作 组成
+ 对象实现数据和操作方法的结合  实现机制是封装
+ 一个对象是其对应类的实例
+面向对象的主要特征 抽象 封装 继承 多态 唯一 模块独立性
- 并不是任何对象都必须有继承性

Q:字符数据
A:
+ 由单引号括起来的单个字符

Q:实体联系模型
A:
+实体：客观存在且可以相互区别的事物
+E - R 方法：实体-联系方法，数据库概念设计阶段常用的方法

Q:自然连接
A:
+要求R和S含有一个或多个共有的属性


